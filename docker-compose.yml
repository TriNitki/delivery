version: "3.7"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["tail", "-f", "/dev/null"]
    volumes:
      - .:/app
    ports:
      - 8008:8000
    environment:
      - POSTGRES_URL=${DOCKER_POSTGRES_URL}
      - CASSANDRA_IP_ADDRESS=${DOCKER_CASSANDRA_IP_ADDRESS}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - ENDPOINT=${DOCKER_ENDPOINT}
      - REDIS_HOST=${REDIS_DOCKER_HOST}
      - REDIS_PORT=${DOCKER_REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ELASTIC_PORT=${DOCKER_ELASTIC_PORT}
    depends_on:
      - db
      - cas
      - cache
      - es01
    networks:
      testing_net:
        ipv4_address: 172.28.1.1
    

  cas:
    container_name: cas
    image: cassandra:latest
    ports:
      - 9042:9042
    environment:
      - CASSANDRA_START_RPC=${DOCKER_CASSANDRA_START_RPC}
      - CASSANDRA_CLUSTER_NAME=${DOCKER_CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_ENDPOINT_SNITCH=${DOCKER_CASSANDRA_ENDPOINT_SNITCH}
      - CASSANDRA_DC=${DOCKER_CASSANDRA_DC}
    networks:
      testing_net:
        ipv4_address: 172.28.1.2


  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    container_name: postgresql_delivery
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${DOCKER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DOCKER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DOCKER_POSTGRES_DB}
    networks:
      testing_net:
        ipv4_address: 172.28.1.4
  

  cache:
    image: redis:latest
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    networks:
      testing_net:
        ipv4_address: 172.28.1.5
  

  es01:
    image: elasticsearch:7.17.12
    container_name: es01
    environment:
      - discovery.type=single-node
      - node.name=es01
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
  
  kibana:
    image: kibana:7.17.12
    depends_on:
      es01:
        condition: service_healthy
    ports:
      - "5602:5601"
    environment:
      - 'ELASTICSEARCH_HOSTS=https://es01:9200'

volumes:
  postgres_data:
  data01:
    driver: local

networks:
  elastic:
      driver: bridge
  testing_net:
      ipam:
        driver: default
        config:
            - subnet: 172.28.0.0/16