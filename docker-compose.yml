version: "3.7"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: ["tail", "-f", "/dev/null"]
    container_name: web
    volumes:
      - .:/app
    ports:
      - 8008:8000
    environment:
      - POSTGRES_URL=${DOCKER_POSTGRES_URL}
      - CASSANDRA_HOST=${DOCKER_CASSANDRA_HOST}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
      - CASSANDRA_PORT=${DOCKER_CASSANDRA_PORT}
      - WEB_DOMAIN=${DOCKER_WEB_DOMAIN}
      - WEB_PORT=${DOCKER_WEB_PORT}
      - REDIS_HOST=${REDIS_DOCKER_HOST}
      - REDIS_PORT=${DOCKER_REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - ELASTIC_PORT=${DOCKER_ELASTIC_PORT}
    depends_on:
      - db
      - cas
      - cache
      - es01
    

  cas:
    image: cassandra:latest
    container_name: cas
    volumes:
      - cas_data:/var/lib/cassandra
    ports:
      - ${CASSANDRA_PORT}:${DOCKER_CASSANDRA_PORT}
    environment:
      - CASSANDRA_START_RPC=${CASSANDRA_START_RPC}
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_ENDPOINT_SNITCH=${CASSANDRA_ENDPOINT_SNITCH}
      - CASSANDRA_DC=${CASSANDRA_DC}


  db:
    image: postgres:15-alpine
    container_name: postgresql
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - ${POSTGRES_PORT}:${DOCKER_POSTGRES_PORT}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
  

  cache:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - ${REDIS_PORT}:${DOCKER_REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
  

  es01:
    image: elasticsearch:7.17.12
    container_name: es01
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_PORT}:${DOCKER_ELASTIC_PORT}
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
  

  kibana:
    image: kibana:7.17.12
    container_name: kibana
    volumes:
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:${DOCKER_KIBANA_PORT}
    environment:
      - 'ELASTICSEARCH_HOSTS=http://es01:${DOCKER_ELASTIC_PORT}'
    depends_on:
      - es01
    restart: always

volumes:
  postgres_data:
  cas_data:
  data01:
    driver: local
  kibana-data:
    driver: local